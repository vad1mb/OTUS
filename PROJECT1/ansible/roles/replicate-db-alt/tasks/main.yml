- name: 'Enable service MariaDB'
  service:
    name: mariadb
    state: started
    enabled: yes

- name: "Config: Set server-id"
  lineinfile:
    dest: /etc/mysql/mariadb.conf.d/50-server.cnf
    regexp: "^ *#* *server-id"
    line: "server-id = {{ db_server_id }}"
    backup: yes
  notify: 'Restart MariaDB Service'


- name: "Config: Enable binlog"
  lineinfile:
    dest: /etc/mysql/mariadb.conf.d/50-server.cnf
    regexp: "^ *#* *log_bin"
    line: "log_bin = /var/log/mysql/mysql-bin.log"
    backup: yes
  when: db_server_id == 1
  notify: 'Restart MariaDB Service'

- name: Create replication user on Master
  community.mysql.mysql_user:
    login_unix_socket: /var/run/mysqld/mysqld.sock
    name: "{{ dbuser_replicator }}"
    password: "{{ dbuser_replicator_pass }}"
    host: "{{ item }}"
    priv: '*.*:REPLICATION SLAVE'
    state: present
  loop: "{{ replication_host }}"

# - name: MariaDB create replication user
#   mysql_user:
#     name: "{{ dbuser_replicator }}"
#     password: "{{ dbuser_replicator_pass }}"
#     priv: '*.*:REPLICATION SLAVE'
#     host: "%"
#     state: present
#   notify: 'Restart MariaDB Service'


- name: Get MariaDB master state
  community.mysql.mysql_info:
    login_unix_socket: /var/run/mysqld/mysqld.sock
    filter: master_status
  register: db_master_status


- debug:
    msg: "{{ db_server_id }} - {{ db_master_status.master_status }}"
  when: db_debug|default(False) == True


- name: "(Maybe) Restart MariaDB"
  meta: flush_handlers


- name: Get MariaDB master state
  community.mysql.mysql_info:
    login_unix_socket: /var/run/mysqld/mysqld.sock
    filter: master_status
  register: db_master_status_new


# - debug:
#     msg: "{{ db_server_id }} - {{ db_master_status_new.master_status }}"
#   when: db_debug|default(False) == True


- name: "(Master) Reset binlog"
  command: '/usr/bin/mysql -u root -e "RESET MASTER"'
  when: db_server_id == 1 and db_master_status.master_status == {}


- name: "(Slave) Get status"
  community.mysql.mysql_replication:
    login_unix_socket: /var/run/mysqld/mysqld.sock
    mode: getslave
  register: db_slave_status


# - debug:
#     var: db_slave_status
#   when: db_debug|default(False) == True


- name: "(Slave) Setup replication"
  # command: '/usr/bin/mysql -u root -e "CHANGE MASTER TO master_host=\"{{ hostvars["db1"]["ansible_default_ipv4"].address }}\", master_user=\"{{ dbuser_replicator }}\", master_password=\"{{ dbuser_replicator_pass }}\", master_use_gtid=current_pos"'
  command: '/usr/bin/mysql -u root -e "CHANGE MASTER TO master_host=\"{{ master_host }}\", master_user=\"{{ dbuser_replicator }}\", master_password=\"{{ dbuser_replicator_pass }}\", master_use_gtid=current_pos"'
  when: db_server_id != 1 and db_slave_status.Slave_IO_Running|default("No") == "No"
  notify: 'Restart MariaDB Service'

# - debug:
#     msg: "master_host= {{ master_host }}"
#   when: db_debug|default(False) == True

- name: "(Slave) Start slave"
  community.mysql.mysql_replication:
    login_unix_socket: /var/run/mysqld/mysqld.sock
    mode: startslave
  when: db_server_id != 1 and db_slave_status.Slave_IO_Running|default("No") == "No"
